#include <Arduino.h>
#include <SoftwareSerial.h>

// Pin definitions for ATtiny85
const int ult_sensonr_rx = PB3;  // Pin 0 for ultrasonic sensor RX
const int ult_sensor_tx = PB4;   // Pin 1 for ultrasonic sensor TX
const int power_radio = PB2;     // Pin 3 for power control of the HC-12
const int hc12_tx = PB1;
const int hc12_rx = PB0;

// Constants and Variables
SoftwareSerial HC12(hc12_tx, hc12_rx);   // HC-12 TX on Pin 2, RX on Pin 3
SoftwareSerial jsnSerial(ult_sensonr_rx, ult_sensor_tx);

const int senzor_id = 1;
const int height_of_tank = 200;
const float alpha = 0.1;     // EMA Smoothing factor
long distance_old = 0;
float ema_value = 0;         // Initial EMA value

volatile int f_wdt = 1;
volatile int sleep_counts = 0;
const int max_sleep_rounds = 3;
const int max_measurements = 5;
const int max_transmit_loops = 10;

void powerOnDevices() {
  // Turn on radio module
  pinMode(power_radio, OUTPUT);
  //digitalWrite(power_radio, HIGH);
}

void blink (int times) {
  for (int i=0; i< times; i++) {
    digitalWrite(power_radio, HIGH);
    delay(10);
    digitalWrite(power_radio, LOW);
  }
}

void setup() {
  // ATtiny85 doesn't have hardware serial, so we're using SoftwareSerial
  HC12.begin(9600);   // HC-12 at 9600 baud
  jsnSerial.begin(9600); // Ultrasonic sensor at 9600 baud
  powerOnDevices();
}

float getEMA(int newReading, float prevEMA, float alpha) {
  return alpha * newReading + (1 - alpha) * prevEMA;
}

unsigned int getDistance() {
  unsigned int distance;
  byte startByte, h_data, l_data, sum = 0;
  byte buf[3];

  startByte = (byte)jsnSerial.read();
  if (startByte == 255) {
    jsnSerial.readBytes(buf, 3);
    h_data = buf[0];
    l_data = buf[1];
    sum = buf[2];
    distance = (h_data << 8) + l_data;
    if (((startByte + h_data + l_data) & 0xFF) != sum) {
      // Invalid checksum
    } else {
      return distance;
    }
  }
  return 0;
}

int getDistanceExt() {
  blink(2);
  jsnSerial.write(0x01);
  while (jsnSerial.available() == 0) {
    jsnSerial.write(0x01);
    delay(50);
  }
  blink(4);
  int distance = round(getDistance() / 10); // Convert to cm
  if (distance > 0 && distance < height_of_tank) {
    return distance;
  } else {
    return height_of_tank; // Return max value if out of range
  }
}

void Transmit_data(int senzor_id, int distance) {
  int crc_sum = senzor_id + distance;
  String message = String(senzor_id) + "," + String(distance) + "," + String(crc_sum);
  HC12.println(message);
}

void measureAndTransmit() {
  int raw_distance = getDistanceExt();
  int filtered_distance = raw_distance; // Apply EMA filter if necessary

  if (filtered_distance > 0 && filtered_distance < height_of_tank) {
    for (int i = 0; i < max_transmit_loops; i++) {
      blink(50);
      Transmit_data(senzor_id, filtered_distance);
      delay(100);
    }
  }
}

void loop() {
  delay(100); // Delay before measurement
  measureAndTransmit();
}
